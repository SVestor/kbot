.EXPORT_ALL_VARIABLES:

APP=$(shell basename $(shell git remote get-url origin))
REGYSTRY=svestor
VERSION=$(shell git describe --tags --abbrev=0)-$(shell git rev-parse --short HEAD)
OS=linux  
OS1=windows
OS2=darwin #MacOS
OS3=android

format:
	@gofmt -s -w ./

lint:
	golint

test:
	@go test -v 	

goget:
	@go get

linux: format goget
	@read -p "Enter the desired architecture to make it for Linux: |amd64|386|arm64|arm| : " ARCH && \
		export ARCH=$$ARCH && \
	case $$ARCH in \
        (amd64) \
             CGO_ENABLED=0 GOOS=${OS} GOARCH=$$ARCH go build -v -o kbot -ldflags "-X="github.com/SVestor/kbot/cmd.appVersion=${VERSION}; \
			echo " !!! Your Linux package for $$ARCH was built and is ready to use !!!"; \
                       	;; \
        (arm64) \
            CGO_ENABLED=0 GOOS=${OS} GOARCH=$$ARCH go build -v -o kbot -ldflags "-X="github.com/SVestor/kbot/cmd.appVersion=${VERSION}; \
			echo " !!! Your Linux package for $$ARCH was built and is ready to use !!!"; \
			;; \
	(arm) \
            CGO_ENABLED=0 GOOS=${OS} GOARCH=$$ARCH go build -v -o kbot -ldflags "-X="github.com/SVestor/kbot/cmd.appVersion=${VERSION}; \
	    		echo " !!! Your Linux package for $$ARCH was built and is ready to use !!!"; \
            ;; \
	(386) \
            CGO_ENABLED=0 GOOS=${OS} GOARCH=$$ARCH go build -v -o kbot -ldflags "-X="github.com/SVestor/kbot/cmd.appVersion=${VERSION}; \
	    		echo " !!! Your Linux package for $$ARCH was built and is ready to use !!!"; \
            ;; \
        esac

image-linux: format goget
	@read -p "Enter the desired architecture to make it for Linux: |amd64|386|arm64|arm| : " ARCH && \
		export ARCH=$$ARCH && \
	case $$ARCH in \
        (amd64) \
             CGO_ENABLED=0 GOOS=${OS} GOARCH=$$ARCH go build -v -o kbot -ldflags "-X="github.com/SVestor/kbot/cmd.appVersion=${VERSION}; \
			echo " !!! Your Linux package for $$ARCH was built and is ready to use !!!"; \
	    TARCH=$$ARCH ;\
                       	;; \
        (arm64) \
            CGO_ENABLED=0 GOOS=${OS} GOARCH=$$ARCH go build -v -o kbot -ldflags "-X="github.com/SVestor/kbot/cmd.appVersion=${VERSION}; \
			echo " !!! Your Linux package for $$ARCH was built and is ready to use !!!"; \
            docker build . -t ${REGYSTRY}/${APP}:${VERSION}-$$ARCH ; \
			;; \
	(arm) \
            CGO_ENABLED=0 GOOS=${OS} GOARCH=$$ARCH go build -v -o kbot -ldflags "-X="github.com/SVestor/kbot/cmd.appVersion=${VERSION}; \
	    		echo " !!! Your Linux package for $$ARCH was built and is ready to use !!!"; \
                docker build . -t ${REGYSTRY}/${APP}:${VERSION}-$$ARCH ; \
            ;; \
	(386) \
            CGO_ENABLED=0 GOOS=${OS} GOARCH=$$ARCH go build -v -o kbot -ldflags "-X="github.com/SVestor/kbot/cmd.appVersion=${VERSION}; \
	    		echo " !!! Your Linux package for 386 was built and is ready to use !!!"; \
                docker build . -t ${REGYSTRY}/${APP}:${VERSION}-$$ARCH ; \
            ;; \
        esac ; \
	$(call build_image,$(GLOBAL))
build_image = docker build --build-arg TARCH="$(1)" -t ${REGYSTRY}/${APP}:${VERSION}-$$TARCH . 
	
image-l: image-linux
	$(call build_image, $(GLOBAL))


push:
	docker push ${REGYSTRY}/${APP}:${VERSION}-${TARGETARCH} 	

clean:
	rm -rf kbot
